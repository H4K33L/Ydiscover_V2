#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myexpressapp:server');
var http = require('http');
var {Server} = require('socket.io');
var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


/**
 * Games funcs
 */
var io = new Server(server);

io.on("connection", (socket) => {
  console.info(`Client connected [id=${socket.id}]`);
  console.log(io.sockets.server.engine.clientsCount);
  socket.on('room', function(roomID) {
    socket.join(roomID);
    console.log('user connected on room :',roomID);
    //
    let test = io.sockets.adapter.rooms[roomID] || {};
    var numSocketsInRoom = Object.keys(test).length;
    console.log(numSocketsInRoom)
    if(numSocketsInRoom > 4) {
      socket.emit('deco', "");
    };
    //
    socket.on('disconnect', () => {
      console.log('user disconnected');
    });

    io.in(roomID).emit('requestRole', "");

    socket.on("role", (role) =>{
      console.info(`Client [id=${socket.id}]`);
      console.log(role);
      io.in(roomID).emit("del", role);
      if (role !== 'purpleSPY' && role !== 'purpleMaster' && role !== 'yelowSPY' && role !== 'yelowMaster') {
        socket.emit('deco', "");
      };
    });

    socket.on('requestWords', ()=> {
      fs.readFile("words.json", (err, data) => {
        if (err){throw err}
        
        let list = JSON.parse(data).noms_communs;
        let words = [];
        let index =0;
        while (index < 25) {
          let rand = Math.floor(Math.random() * list.length);
          let word = {
            ID: index.toString(),
            word: list[rand],
            color: "white",
            reaveled: false,
          };
          let notDouble = true;
          for (let i = 0; i< words.length; i++) {
            if (word.word === words[i].word) {
              notDouble = false;
              break;
            };
          };
          if (notDouble) {
            words.push(word);
            index++;
          };
        };

        words[Math.floor(Math.random() * words.length)].color = "black";

        let i = 0;
        while (i < 9) {
          let rand = Math.floor(Math.random() * words.length);
          if (words[rand].color === "white") {
            i++;
            words[rand].color = '#3B3486';
          }
        }

        i = 0;
        while (i < 8) {
          let rand = Math.floor(Math.random() * words.length);
          if (words[rand].color === "white") {
            i++;
            words[rand].color = '#F8E559';
          }
        }
  
        for (let i = 0; i < 25 ; i++) {
          io.in(roomID).emit("updateWord", words[i]);
        };
        io.in(roomID).emit("turnTo", "purpleMaster");
      });
    });

    socket.on("modifiateWord", (word)=> {
      io.in(roomID).emit("updateWord", word);
    });

    socket.on("turnEnd", (next)=> {
      io.in(roomID).emit("turnTo", next);
    });

    socket.on("clue", (clues)=> {
      io.in(roomID).emit("newClue", clues);
    });
  });
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
